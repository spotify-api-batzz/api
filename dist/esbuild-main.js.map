{
  "version": 3,
  "sources": ["../src/db.ts", "../src/app.ts", "../src/models/albums.ts", "../src/models/artists.ts", "../src/models/recent_listen_data.ts", "../src/models/recent_listens.ts", "../src/models/songs.ts", "../src/models/thumbnails.ts", "../src/models/top_artist_data.ts", "../src/models/top_artists.ts", "../src/models/top_song_data.ts", "../src/models/top_songs.ts", "../src/models/users.ts", "../src/models/init-models.ts"],
  "sourcesContent": ["import { Sequelize, Model, DataTypes } from \"sequelize\";\n\nlet instance: Sequelize;\n\nconst ConnectToDB = (connstring: string) => {\n  if (!instance) {\n    instance = new Sequelize(connstring);\n  }\n};\n\nexport { ConnectToDB, instance };\n", "import { ConnectToDB, instance } from \"./db\";\nimport express, { query } from \"express\";\nimport { initModels } from \"models/init-models\";\nimport {\n  isNil,\n  omit,\n  pick,\n  pipe,\n  map,\n  reduce,\n  hasPath,\n  assoc,\n  assocPath,\n} from \"ramda\";\n\nvar app = express();\n\nConnectToDB(\"postgres://test:123@192.168.0.27:5432/spotify\");\nlet models = initModels(instance);\n\nconst parseIncludes = (joins: string[]) => {\n  let includes = { include: [] };\n  joins.forEach((join) => {\n    let modelList = join.split(\".\");\n    let baseInclude = {};\n    if (modelList.length === 0) return \"\";\n    modelList.forEach((item, i) => {\n      baseInclude = assocPath(\n        new Array(i).fill(1).map((i) => \"include\"),\n        { model: models[modelList[i]] },\n        baseInclude\n      );\n    });\n    includes.include.push(baseInclude);\n  });\n  return includes;\n};\n\nObject.keys(models).forEach((key) => {\n  app.get(`/${key}`, async (req, res) => {\n    let items = await models[key].findAll({\n      ...pick([\"limit\", \"offset\"], req.query),\n      ...parseIncludes((req.query.joins as string).split(\",\")),\n    });\n\n    res.send(items);\n  });\n});\n\napp.listen(3000);\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\nimport { artists } from \"./init-models\";\n\nexport interface albumsAttributes {\n  id: string;\n  name?: string;\n  spotify_id?: string;\n  artist_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type albumsPk = \"id\";\nexport type albumsId = albums[albumsPk];\nexport type albumsCreationAttributes = Optional<albumsAttributes, albumsPk>;\n\nexport class albums\n  extends Model<albumsAttributes, albumsCreationAttributes>\n  implements albumsAttributes\n{\n  id!: string;\n  name?: string;\n  spotify_id?: string;\n  artist_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof albums {\n    albums.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        name: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        spotify_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        artist_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"albums\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"albums_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return albums;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface artistsAttributes {\n  id: string;\n  name?: string;\n  spotify_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type artistsPk = \"id\";\nexport type artistsId = artists[artistsPk];\nexport type artistsCreationAttributes = Optional<artistsAttributes, artistsPk>;\n\nexport class artists\n  extends Model<artistsAttributes, artistsCreationAttributes>\n  implements artistsAttributes\n{\n  id!: string;\n  name?: string;\n  spotify_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof artists {\n    artists.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        name: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        spotify_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"artists\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"artists_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return artists;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface recent_listen_dataAttributes {\n  id: string;\n  song_id?: string;\n  recent_listen_id?: string;\n  played_at?: Date;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type recent_listen_dataPk = \"id\";\nexport type recent_listen_dataId = recent_listen_data[recent_listen_dataPk];\nexport type recent_listen_dataCreationAttributes = Optional<\n  recent_listen_dataAttributes,\n  recent_listen_dataPk\n>;\n\nexport class recent_listen_data\n  extends Model<\n    recent_listen_dataAttributes,\n    recent_listen_dataCreationAttributes\n  >\n  implements recent_listen_dataAttributes\n{\n  id!: string;\n  song_id?: string;\n  recent_listen_id?: string;\n  played_at?: Date;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof recent_listen_data {\n    recent_listen_data.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        song_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        recent_listen_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        played_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"recent_listen_data\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"recent_listen_data_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return recent_listen_data;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface recent_listensAttributes {\n  id: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type recent_listensPk = \"id\";\nexport type recent_listensId = recent_listens[recent_listensPk];\nexport type recent_listensCreationAttributes = Optional<\n  recent_listensAttributes,\n  recent_listensPk\n>;\n\nexport class recent_listens\n  extends Model<recent_listensAttributes, recent_listensCreationAttributes>\n  implements recent_listensAttributes\n{\n  id!: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof recent_listens {\n    recent_listens.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        user_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"recent_listens\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"recent_listens_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return recent_listens;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface songsAttributes {\n  id: string;\n  spotify_id?: string;\n  album_id?: string;\n  artist_id?: string;\n  name?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type songsPk = \"id\";\nexport type songsId = songs[songsPk];\nexport type songsCreationAttributes = Optional<songsAttributes, songsPk>;\n\nexport class songs\n  extends Model<songsAttributes, songsCreationAttributes>\n  implements songsAttributes\n{\n  id!: string;\n  spotify_id?: string;\n  album_id?: string;\n  artist_id?: string;\n  name?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof songs {\n    songs.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        spotify_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        album_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        artist_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        name: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"songs\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"songs_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return songs;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface thumbnailsAttributes {\n  id: string;\n  entity?: string;\n  entity_id?: string;\n  width?: number;\n  height?: number;\n  url?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type thumbnailsPk = \"id\";\nexport type thumbnailsId = thumbnails[thumbnailsPk];\nexport type thumbnailsCreationAttributes = Optional<\n  thumbnailsAttributes,\n  thumbnailsPk\n>;\n\nexport class thumbnails\n  extends Model<thumbnailsAttributes, thumbnailsCreationAttributes>\n  implements thumbnailsAttributes\n{\n  id!: string;\n  entity?: string;\n  entity_id?: string;\n  width?: number;\n  height?: number;\n  url?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof thumbnails {\n    thumbnails.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        entity: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        entity_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        width: {\n          type: DataTypes.SMALLINT,\n          allowNull: true,\n        },\n        height: {\n          type: DataTypes.SMALLINT,\n          allowNull: true,\n        },\n        url: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"thumbnails\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"thumbnails_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return thumbnails;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface top_artist_dataAttributes {\n  id: string;\n  artist_id?: string;\n  top_artist_id?: string;\n  time_period?: string;\n  order?: number;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type top_artist_dataPk = \"id\";\nexport type top_artist_dataId = top_artist_data[top_artist_dataPk];\nexport type top_artist_dataCreationAttributes = Optional<\n  top_artist_dataAttributes,\n  top_artist_dataPk\n>;\n\nexport class top_artist_data\n  extends Model<top_artist_dataAttributes, top_artist_dataCreationAttributes>\n  implements top_artist_dataAttributes\n{\n  id!: string;\n  artist_id?: string;\n  top_artist_id?: string;\n  time_period?: string;\n  order?: number;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof top_artist_data {\n    top_artist_data.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        artist_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        top_artist_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        time_period: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        order: {\n          type: DataTypes.INTEGER,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"top_artist_data\",\n        schema: \"public\",\n        timestamps: false,\n        underscored: true,\n        indexes: [\n          {\n            name: \"top_artist_data_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return top_artist_data;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface top_artistsAttributes {\n  id: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type top_artistsPk = \"id\";\nexport type top_artistsId = top_artists[top_artistsPk];\nexport type top_artistsCreationAttributes = Optional<\n  top_artistsAttributes,\n  top_artistsPk\n>;\n\nexport class top_artists\n  extends Model<top_artistsAttributes, top_artistsCreationAttributes>\n  implements top_artistsAttributes\n{\n  id!: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof top_artists {\n    top_artists.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        user_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"top_artists\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"top_artists_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return top_artists;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface top_song_dataAttributes {\n  id: string;\n  song_id?: string;\n  top_song_id?: string;\n  order?: number;\n  time_period?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type top_song_dataPk = \"id\";\nexport type top_song_dataId = top_song_data[top_song_dataPk];\nexport type top_song_dataCreationAttributes = Optional<\n  top_song_dataAttributes,\n  top_song_dataPk\n>;\n\nexport class top_song_data\n  extends Model<top_song_dataAttributes, top_song_dataCreationAttributes>\n  implements top_song_dataAttributes\n{\n  id!: string;\n  song_id?: string;\n  top_song_id?: string;\n  order?: number;\n  time_period?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof top_song_data {\n    top_song_data.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        song_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        top_song_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        order: {\n          type: DataTypes.INTEGER,\n          allowNull: true,\n        },\n        time_period: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"top_song_data\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"top_song_data_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return top_song_data;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface top_songsAttributes {\n  id: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type top_songsPk = \"id\";\nexport type top_songsId = top_songs[top_songsPk];\nexport type top_songsCreationAttributes = Optional<\n  top_songsAttributes,\n  top_songsPk\n>;\n\nexport class top_songs\n  extends Model<top_songsAttributes, top_songsCreationAttributes>\n  implements top_songsAttributes\n{\n  id!: string;\n  user_id?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof top_songs {\n    top_songs.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        user_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"top_songs\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"top_songs_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return top_songs;\n  }\n}\n", "import * as Sequelize from \"sequelize\";\nimport { DataTypes, Model, Optional } from \"sequelize\";\n\nexport interface usersAttributes {\n  id: string;\n  spotify_id?: string;\n  username?: string;\n  password?: string;\n  created_at?: Date;\n  updated_at?: Date;\n}\n\nexport type usersPk = \"id\";\nexport type usersId = users[usersPk];\nexport type usersCreationAttributes = Optional<usersAttributes, usersPk>;\n\nexport class users\n  extends Model<usersAttributes, usersCreationAttributes>\n  implements usersAttributes\n{\n  id!: string;\n  spotify_id?: string;\n  username?: string;\n  password?: string;\n  created_at?: Date;\n  updated_at?: Date;\n\n  static initModel(sequelize: Sequelize.Sequelize): typeof users {\n    users.init(\n      {\n        id: {\n          type: DataTypes.TEXT,\n          allowNull: false,\n          primaryKey: true,\n        },\n        spotify_id: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        username: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        password: {\n          type: DataTypes.TEXT,\n          allowNull: true,\n        },\n        created_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n        updated_at: {\n          type: DataTypes.DATE,\n          allowNull: true,\n        },\n      },\n      {\n        sequelize,\n        tableName: \"users\",\n        schema: \"public\",\n        underscored: true,\n        timestamps: false,\n        indexes: [\n          {\n            name: \"users_pkey\",\n            unique: true,\n            fields: [{ name: \"id\" }],\n          },\n        ],\n      }\n    );\n    return users;\n  }\n}\n", "import type { Sequelize, Model } from \"sequelize\";\nimport { albums } from \"./albums\";\nimport type { albumsAttributes, albumsCreationAttributes } from \"./albums\";\nimport { artists } from \"./artists\";\nimport type { artistsAttributes, artistsCreationAttributes } from \"./artists\";\nimport { recent_listen_data } from \"./recent_listen_data\";\nimport type {\n  recent_listen_dataAttributes,\n  recent_listen_dataCreationAttributes,\n} from \"./recent_listen_data\";\nimport { recent_listens } from \"./recent_listens\";\nimport type {\n  recent_listensAttributes,\n  recent_listensCreationAttributes,\n} from \"./recent_listens\";\nimport { songs } from \"./songs\";\nimport type { songsAttributes, songsCreationAttributes } from \"./songs\";\nimport { thumbnails } from \"./thumbnails\";\nimport type {\n  thumbnailsAttributes,\n  thumbnailsCreationAttributes,\n} from \"./thumbnails\";\nimport { top_artist_data } from \"./top_artist_data\";\nimport type {\n  top_artist_dataAttributes,\n  top_artist_dataCreationAttributes,\n} from \"./top_artist_data\";\nimport { top_artists } from \"./top_artists\";\nimport type {\n  top_artistsAttributes,\n  top_artistsCreationAttributes,\n} from \"./top_artists\";\nimport { top_song_data } from \"./top_song_data\";\nimport type {\n  top_song_dataAttributes,\n  top_song_dataCreationAttributes,\n} from \"./top_song_data\";\nimport { top_songs } from \"./top_songs\";\nimport type {\n  top_songsAttributes,\n  top_songsCreationAttributes,\n} from \"./top_songs\";\nimport { users } from \"./users\";\nimport type { usersAttributes, usersCreationAttributes } from \"./users\";\n\nexport {\n  albums,\n  artists,\n  recent_listen_data,\n  recent_listens,\n  songs,\n  thumbnails,\n  top_artist_data,\n  top_artists,\n  top_song_data,\n  top_songs,\n  users,\n};\n\nexport type {\n  albumsAttributes,\n  albumsCreationAttributes,\n  artistsAttributes,\n  artistsCreationAttributes,\n  recent_listen_dataAttributes,\n  recent_listen_dataCreationAttributes,\n  recent_listensAttributes,\n  recent_listensCreationAttributes,\n  songsAttributes,\n  songsCreationAttributes,\n  thumbnailsAttributes,\n  thumbnailsCreationAttributes,\n  top_artist_dataAttributes,\n  top_artist_dataCreationAttributes,\n  top_artistsAttributes,\n  top_artistsCreationAttributes,\n  top_song_dataAttributes,\n  top_song_dataCreationAttributes,\n  top_songsAttributes,\n  top_songsCreationAttributes,\n  usersAttributes,\n  usersCreationAttributes,\n};\n\nexport function initModels(sequelize: Sequelize) {\n  albums.initModel(sequelize);\n  artists.initModel(sequelize);\n  recent_listen_data.initModel(sequelize);\n  recent_listens.initModel(sequelize);\n  songs.initModel(sequelize);\n  thumbnails.initModel(sequelize);\n  top_artist_data.initModel(sequelize);\n  top_artists.initModel(sequelize);\n  top_song_data.initModel(sequelize);\n  top_songs.initModel(sequelize);\n  users.initModel(sequelize);\n\n  // albums\n  albums.hasMany(thumbnails, {\n    foreignKey: \"entity_id\",\n    constraints: false,\n    scope: {\n      entity: \"album\",\n    },\n  });\n  albums.belongsTo(artists);\n\n  //artists\n  artists.hasMany(thumbnails, {\n    foreignKey: \"entity_id\",\n    constraints: false,\n    scope: {\n      entity: \"artist\",\n    },\n  });\n  artists.hasOne(albums);\n\n  // thumbnails\n  thumbnails.belongsTo(artists, {\n    foreignKey: \"entity_id\",\n    constraints: false,\n  });\n  thumbnails.belongsTo(albums, { foreignKey: \"entity_id\", constraints: false });\n\n  //songs\n  songs.belongsTo(artists);\n  songs.belongsTo(albums);\n\n  return {\n    albums: albums,\n    artists: artists,\n    recent_listen_data: recent_listen_data,\n    recent_listens: recent_listens,\n    songs: songs,\n    thumbnails: thumbnails,\n    top_artist_data: top_artist_data,\n    top_artists: top_artists,\n    top_song_data: top_song_data,\n    top_songs: top_songs,\n    users: users,\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
